Putanja do datoteke: /c/Users/eaprlik/Desktop/ZAVRŠNI/weatherApp/config.py
Sadržaj datoteke:
class Config:
    SECRET_KEY = 'P22hvetA'
    CORS_HEADERS = 'Content-Type'
    API_KEY = '679e4d415ae94bcda9322259230706'
    JWT_SECRET_KEY = 'apdifjaempc2983r23jiadm39'

    SQLALCHEMY_DATABASE_URI = 'postgresql://postgres:P22hvetA@localhost/weatherapp'
    SQLALCHEMY_TRACK_MODIFICATIONS = False

Putanja do datoteke: /c/Users/eaprlik/Desktop/ZAVRŠNI/weatherApp/database/__init__.py
Sadržaj datoteke:
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

Putanja do datoteke: /c/Users/eaprlik/Desktop/ZAVRŠNI/weatherApp/forms/login.py
Sadržaj datoteke:
from flask import Blueprint, redirect, jsonify, request
from flask_wtf import FlaskForm
from flask_cors import cross_origin
from flask_jwt_extended import create_access_token, create_refresh_token, jwt_required, get_jwt_identity
from wtforms import StringField, PasswordField
from wtforms.validators import DataRequired, ValidationError

from config import Config
from models.user import User
from models.refreshToken import RefreshToken
from database import db

import datetime
import jwt

login_bp = Blueprint('login', __name__)

class LoginForm(FlaskForm):
    email = StringField('E-mail', validators=[DataRequired()])
    password = PasswordField('Password', validators=[DataRequired()])

@login_bp.route('/login', methods=['POST'])
@cross_origin(origin='localhost:5000/')
def login():
    form = LoginForm()
    user = User.query.filter_by(email=form.email.data).first()

    if user is None or user.password != form.password.data:
        print("Error")
        return jsonify({'status': 'error', 'message': 'Incorrect email or password'})
    else:
        # Kreiranje access i refresh tokena
        access_token = create_access_token(identity=user.email)
        
        # Generiranje payloada za refresh token
        expires = datetime.datetime.utcnow() + datetime.timedelta(days=30)
        payload = {
            'user_id': user.id,
            'exp': expires
        }
        refresh_token = jwt.encode(payload, Config.JWT_SECRET_KEY, algorithm='HS256')

        # Pohranjivanje refresh tokena u bazu podataka
        ip = request.remote_addr
        user_agent = request.headers.get('User-Agent')
        token_entry = RefreshToken(user_id=user.id, token=refresh_token, ip=ip, user_agent=user_agent, expires=expires)
        db.session.add(token_entry)
        db.session.commit()

        print("Successful login for ", user.username)
        return jsonify({'status': 'success', 'message': 'Successful login', 'access_token': access_token, 'refresh_token': refresh_token})


@login_bp.route('/logout', methods=['POST'])
def logout():
    print("eto nas ovdje")
    data = request.get_json()
    token = data.get('refreshToken')
    print(data)
    refresh_token = RefreshToken.query.filter_by(token=token).first()
    if refresh_token is None:
        return jsonify({'error': 'Invalid token'}), 401
    db.session.delete(refresh_token)
    db.session.commit()
    return jsonify({'message': 'Logout successful'})

from flask import current_app

@login_bp.route('/refresh', methods=['POST'])
@jwt_required(refresh=True)
def refresh():
    ip = request.remote_addr
    user_agent = request.headers.get('User-Agent')
    current_user = get_jwt_identity()

    # Dobivanje korisnika iz baze podataka koriste
Putanja do datoteke: /c/Users/eaprlik/Desktop/ZAVRŠNI/weatherApp/forms/newLocation.py
Sadržaj datoteke:
from flask_wtf import FlaskForm
from wtforms import StringField
from wtforms.validators import DataRequired

from flask import Blueprint, redirect, session
from flask_jwt_extended import jwt_required, get_jwt_identity

from models.location import Location
from database import db

location_bp = Blueprint('location', __name__)

class LocationForm(FlaskForm):
    email = StringField('E-mail', validators=[DataRequired()])
    location = StringField('Location', validators=[DataRequired()])

@location_bp.route('/location', methods=['POST'])
@jwt_required() 
def location():
    # data = request.get_json()
    # print(data)
    current_user = get_jwt_identity()
    form = LocationForm()
    location = Location(email=form.email.data,
                        location=form.location.data)
    db.session.add(location)
    db.session.commit()
    print('Added new location ', location.location, ' for user ', location.email)
    # else:
    #     error = form.errors
    #     print(error)

    return redirect('/')

Putanja do datoteke: /c/Users/eaprlik/Desktop/ZAVRŠNI/weatherApp/forms/registration.py
Sadržaj datoteke:
from flask_wtf import FlaskForm, CSRFProtect
from wtforms import StringField, PasswordField, SubmitField
from wtforms.validators import DataRequired, ValidationError, EqualTo

from flask import Blueprint, request, jsonify, redirect, session
from flask_login import current_user, login_user, logout_user
import requests

from config import Config
from models.user import User
from database import db

registration_bp = Blueprint('register', __name__)

class RegistrationForm(FlaskForm):
    email = StringField('E-mail', validators=[DataRequired()])
    username = StringField('Username', validators=[DataRequired()])
    password = PasswordField('Password', validators=[DataRequired()])
    def_location = StringField('location')

    # def validate_username(self, username):
    #     user = User.query.filter_by(username=username.data).first()
    #     if user is not None:
    #         raise ValidationError('Please use a different username.')

    def validate_email(self, email):
        user = User.query.filter_by(email=self.email.data).first()
        if user is not None:
            return False

@registration_bp.route('/register', methods=['POST'])
def register():
    form = RegistrationForm()
    if form.validate():
        user = User(email=form.email.data,
                    username=form.username.data,
                    password=form.password.data,
                    def_location=form.def_location.data)
        db.session.add(user)
        db.session.commit()
        print('Congratulations, you are now a registered user!')
        return jsonify({'status': 'Okay', 'message': 'Successful registration.'})
    else:
        if user is not None:
            print("Error")
            return jsonify({'status': 'error', 'message': 'E-mail already in use.'})

Putanja do datoteke: /c/Users/eaprlik/Desktop/ZAVRŠNI/weatherApp/forms/__init__.py
Sadržaj datoteke:
from flask import Blueprint

login_bp = Blueprint('login', __name__)
registration_bp = Blueprint('register', __name__)
location_bo = Blueprint('location', __name__)

from .login import *
from .registration import *
from .newLocation import *

Putanja do datoteke: /c/Users/eaprlik/Desktop/ZAVRŠNI/weatherApp/models/location.py
Sadržaj datoteke:
from database import db

class Location(db.Model):
    __tablename__ = 'locations'
    email = db.Column(db.String(120), db.ForeignKey('users.email'), primary_key=True)
    location = db.Column(db.String(64))

Putanja do datoteke: /c/Users/eaprlik/Desktop/ZAVRŠNI/weatherApp/models/refreshToken.py
Sadržaj datoteke:
from database import db

class RefreshToken(db.Model):
    __tablename__ = 'refresh_tokens'
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    token = db.Column(db.String, nullable=False)
    user_agent = db.Column(db.String)
    ip = db.Column(db.String)
    expires = db.Column(db.DateTime, nullable=False)

Putanja do datoteke: /c/Users/eaprlik/Desktop/ZAVRŠNI/weatherApp/models/user.py
Sadržaj datoteke:
from database import db

class User(db.Model):
    __tablename__ = 'users'
    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(120), unique=True, nullable=False)
    username = db.Column(db.String(64), nullable=False)
    password = db.Column(db.String(64), nullable=False)
    def_location = db.Column(db.String(64), nullable = True)
Putanja do datoteke: /c/Users/eaprlik/Desktop/ZAVRŠNI/weatherApp/models/__init__.py
Sadržaj datoteke:
from werkzeug.security import generate_password_hash, check_password_hash
from models.user import User
from models.location import Location


Putanja do datoteke: /c/Users/eaprlik/Desktop/ZAVRŠNI/weatherApp/routes/weather.py
Sadržaj datoteke:
from flask import Blueprint, request, jsonify
from config import Config
import requests

weather_bp = Blueprint('weather', __name__)

@weather_bp.route('/')
def home():
    return 'Homepage!'

@weather_bp.route('/current', methods=['POST'])
def get_current_weather():
    api_key = Config.API_KEY
    data = request.get_json()
    city = data.get('city', 'London')
    url = f'http://api.weatherapi.com/v1/current.json?key={api_key}&q={city}&aqi=yes'

    response = requests.get(url)
    data = response.json()
    return data


@weather_bp.route('/forecast', methods=['POST'])
def get_forecast():
    api_key = Config.API_KEY
    data = request.get_json()
    city = data.get('city', 'London')
    days = data.get('days', '3')
    url = f'http://api.weatherapi.com/v1/forecast.json?key={api_key}&q={city}&days={days}&aqi=yes&alerts=yes'

    response = requests.get(url)
    data = response.json()
    return data


@weather_bp.route('/history', methods=['GET'])
def get_history():
    api_key = Config.API_KEY
    city = request.args.get('city', default='London', type=str)
    date = request.args.get('dt', default='2023-05-23', type=str)
    url = f'http://api.weatherapi.com/v1/history.json?key={api_key}&q={city}&dt={date}'

    response = requests.get(url)
    data = response.json()
    return data


@weather_bp.route('/future', methods=['GET'])
def get_future():
    api_key = Config.API_KEY
    city = request.args.get('city', default='London', type=str)
    date = request.args.get('dt', default='2023-05-23', type=str)
    url = f'http://api.weatherapi.com/v1/history.json?key={api_key}&q={city}&dt={date}'

    response = requests.get(url)
    data = response.json()
    return data


@weather_bp.route('/astronomy', methods=['GET'])
def get_astronomy():
    api_key = Config.API_KEY
    city = request.args.get('city', default='London', type=str)
    date = request.args.get('dt', default='2023-05-23', type=str)
    url = f'http://api.weatherapi.com/v1/astronomy.json?key={api_key}&q={city}&dt={date}'

    response = requests.get(url)
    data = response.json()
    return data


Putanja do datoteke: /c/Users/eaprlik/Desktop/ZAVRŠNI/weatherApp/routes/__init__.py
Sadržaj datoteke:
from flask import Blueprint

weather_bp = Blueprint('weather', __name__)

from .weather import *

Putanja do datoteke: /c/Users/eaprlik/Desktop/ZAVRŠNI/weatherApp/routes/__pycache__/weather.cpython-311.pyc
Sadržaj datoteke:

Putanja do datoteke: /c/Users/eaprlik/Desktop/ZAVRŠNI/weatherApp/routes/__pycache__/__init__.cpython-311.pyc
Sadržaj datoteke:

Putanja do datoteke: /c/Users/eaprlik/Desktop/ZAVRŠNI/weatherApp/__init__.py
Sadržaj datoteke:
from flask import Flask
from flask_cors import CORS
from flask_login import LoginManager
from flask_wtf.csrf import CSRFProtect
from flask_jwt_extended import JWTManager
from config import Config
from routes import weather_bp
from forms import registration_bp
from forms import login_bp
from forms import location_bp
from models.user import User
from database import db

# login = LoginManager()
# login.login_view = 'login'

def create_app():
    app = Flask(__name__)
    app.config.from_object(Config)
    CORS(app, origins="http://localhost:3000", supports_credentials=True)
    jwt = JWTManager(app)
    app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://postgres:P22hvetA@localhost/weatherapp'
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
    app.config['SECRET_KEY'] = 'P22hvetA'
    app.config['WTF_CSRF_ENABLED'] = False

    csrf = CSRFProtect(app)
    db.init_app(app)
    # login.init_app(app)

    with app.app_context():
        users = User.query.all()
        for user in users:
            print(user.username)

    app.register_blueprint(weather_bp)
    app.register_blueprint(registration_bp)
    app.register_blueprint(login_bp)
    app.register_blueprint(location_bp)

    return app

app = create_app()

if __name__ == '__main__':
    app.run(debug=True, port=5000)

