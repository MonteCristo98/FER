sum(m == max(m))
m[apply(m, 1, sum) > 70,]
l<- list(a = 1:5, b = seq(2, 20, 4), c("2", "4", "6", "8", "10", "12"))
l
l[[3]] <- as.numeric(l[[3]])
names(l)[3] <- "c"
l
t.f <- factor(t, levels = c("vrlo hladno", "hladno", "umjereno", "toplo", "vrlo toplo"), ordered = TRUE)
table(t.f)
otype(points)
mean(points@x3)
createExperimentMatrix<- function(n, k) {
stopifnot(is.numeric(n) && is.numeric(k))
stopifnot(n > 1 && n < 1001 && k > 1 && k < 1001)
cbind(1:n, matrix(0, nrow = n, ncol = k))
}
createExperimentMatrix(4,2)
head(earthquakes)
earthquakes %>%
filter(richter > 8)
earthquakes %>%
filter(month %in% c("March", "April", "May")) %>%
filter(region == "Turkey") %>%
filter(!is.na(deaths)) %>%
select(year, month, richter)
worldPhones <- read.csv("./MI/worldPhones.csv")
head(worldPhones)
worldPhones <- pivot_longer(worldPhones, cols = N.Amer:Mid.Amer,
names_to = "WorldRegion",
values_to = "NumberOfPhones")
worldPhones[WorldPhones$Year %in% c(1956, 1957, 1958)]
worldPhones[worldPhones$Year %in% c(1956, 1957, 1958)]
knitr::opts_chunk$set(results = 'hold')
library(sloop)
library(ggplot2)
library(tidyr)
library(dplyr)
rm(list = ls())    # brišemo postojeće varijable kako bi krenuli od nule
load("./MI/MI_podaci.rda")
vecA <- seq(-1000, 0, 10)
# vektor 1:100 s ponavljanjem svakog clana
vecB <- rep(1:100, each = 2)
# vektor s ponovljenim čanovima pomnožen s vektorom (1, -1, ... 1, -1)
vecB <-  vecB * rep(c(1, -1), 100)
#a)
head(vecA, 10)
#vecA[1:10]
#b)
tail(vecB, 10)
#vecB[(length(vecB) - 9):length(vecB)]
max(m)
sum(m == max(m))
m[apply(m, 1, sum) > 70,]
l<- list(a = 1:5, b = seq(2, 20, 4), c("2", "4", "6", "8", "10", "12"))
l
l[[3]] <- as.numeric(l[[3]])
names(l)[3] <- "c"
l
t.f <- factor(t, levels = c("vrlo hladno", "hladno", "umjereno", "toplo", "vrlo toplo"), ordered = TRUE)
table(t.f)
otype(points)
mean(points@x3)
createExperimentMatrix<- function(n, k) {
stopifnot(is.numeric(n) && is.numeric(k))
stopifnot(n > 1 && n < 1001 && k > 1 && k < 1001)
cbind(1:n, matrix(0, nrow = n, ncol = k))
}
createExperimentMatrix(4,2)
head(earthquakes)
earthquakes %>%
filter(richter > 8)
earthquakes %>%
filter(month %in% c("March", "April", "May")) %>%
filter(region == "Turkey") %>%
filter(!is.na(deaths)) %>%
select(year, month, richter)
worldPhones <- read.csv("./MI/worldPhones.csv")
head(worldPhones)
library(tidyr)
worldPhones <- pivot_longer(worldPhones, cols = N.Amer:Mid.Amer,
names_to = "WorldRegion",
values_to = "NumberOfPhones")
worldPhones[worldPhones$Year %in% c(1956, 1957, 1958)]
worldPhones[worldPhones$Year %in% c(1956, 1957, 1958),]
library(tidyr)
worldPhones <- pivot_longer(worldPhones, cols = N.Amer:Mid.Amer,
names_to = "WorldRegion",
values_to = "NumberOfPhones")
knitr::opts_chunk$set(results = 'hold')
library(sloop)
library(ggplot2)
library(tidyr)
library(dplyr)
rm(list = ls())    # brišemo postojeće varijable kako bi krenuli od nule
load("./MI/MI_podaci.rda")
vecA <- seq(-1000, 0, 10)
# vektor 1:100 s ponavljanjem svakog clana
vecB <- rep(1:100, each = 2)
# vektor s ponovljenim čanovima pomnožen s vektorom (1, -1, ... 1, -1)
vecB <-  vecB * rep(c(1, -1), 100)
#a)
head(vecA, 10)
#vecA[1:10]
#b)
tail(vecB, 10)
#vecB[(length(vecB) - 9):length(vecB)]
max(m)
sum(m == max(m))
m[apply(m, 1, sum) > 70,]
l<- list(a = 1:5, b = seq(2, 20, 4), c("2", "4", "6", "8", "10", "12"))
l
l[[3]] <- as.numeric(l[[3]])
names(l)[3] <- "c"
l
t.f <- factor(t, levels = c("vrlo hladno", "hladno", "umjereno", "toplo", "vrlo toplo"), ordered = TRUE)
table(t.f)
otype(points)
mean(points@x3)
createExperimentMatrix<- function(n, k) {
stopifnot(is.numeric(n) && is.numeric(k))
stopifnot(n > 1 && n < 1001 && k > 1 && k < 1001)
cbind(1:n, matrix(0, nrow = n, ncol = k))
}
createExperimentMatrix(4,2)
head(earthquakes)
earthquakes %>%
filter(richter > 8)
earthquakes %>%
filter(month %in% c("March", "April", "May")) %>%
filter(region == "Turkey") %>%
filter(!is.na(deaths)) %>%
select(year, month, richter)
worldPhones <- read.csv("./MI/worldPhones.csv")
head(worldPhones)
library(tidyr)
worldPhones <- pivot_longer(worldPhones, cols = N.Amer:Mid.Amer,
names_to = "WorldRegion",
values_to = "NumberOfPhones")
worldPhones[worldPhones$Year %in% c(1956, 1957, 1958),]
# učitavanje podataka iz datoteke `music.csv`
music <- read.csv("./ZI/music.csv")
head(music)
music %>%
filter(length(song.title) < 8)
music %>%
filter(mchar(song.title) < 8)
music %>%
filter(nchar(song.title) < 8)
music %>%
filter(nchar(song.title) < 8) %>%
select(artist.name, song.title)
music %>%
filter(nchar(song.title) < 8) %>%
select(artist.name, song.title) %>%
head()
music %>%
filter(nchar(song.title) < 8) %>%
select(artist.name, song.title) %>%
head(, 10)
music %>%
filter(nchar(song.title) < 8) %>%
select(artist.name, song.title) %>%
head(10)
music %>%
filter
music %>%
filter(str_detect)
library(stringr)
music %>%
filter(str_detect(song.title, ("hot"|"cool")))
music %>%
filter(str_detect(song.title, ("hot|cool")))
music %>%
filter(str_detect(tolower.song.title, ("hot|cool")))
music %>%
filter(str_detect(tolower(song.title), ("hot|cool")))
music %>%
filter(str_detect(tolower(song.title), ("hot|cool"))) %>%
filter(year > 0) %>%
filter(!is.na(year))
music %>%
filter(str_detect(tolower(song.title), ("hot|cool"))) %>%
filter(year > 0) %>%
filter(!is.na(year)) %>%
select(artist.name, song.title, year, song.hotness) %>%
order(year, decreasing = FALSE)
music %>%
filter(str_detect(tolower(song.title), ("hot|cool"))) %>%
filter(year > 0) %>%
filter(!is.na(year)) %>%
select(artist.name, song.title, year, song.hotness) %>%
arrange(year)
music %>%
filter(str_detect(tolower(song.title), ("hot|cool"))) %>%
filter(year > 0) %>%
filter(!is.na(year)) %>%
select(artist.name, song.title, year, song.hotness) %>%
arrange(year)
music %>%
filter(str_detect(tolower(song.title), ("hot|cool"))) %>%
filter(year > 0) %>%
filter(!is.na(year)) %>%
select(artist.name, song.title, year, song.hotness) %>%
arrange(!year)
music %>%
filter(str_detect(tolower(song.title), ("hot|cool"))) %>%
filter(year > 0) %>%
filter(!is.na(year)) %>%
select(artist.name, song.title, year, song.hotness) %>%
arrange(-year)
music %>%
filter(str_detect(tolower(song.title), ("hot|cool"))) %>%
filter(year > 0) %>%
filter(!is.na(year)) %>%
select(artist.name, song.title, year, song.hotness) %>%
arrange(year)
music %>%
filter(str_detect(tolower(song.title), "(hot|cool)")) %>%
filter(year > 0) %>%
filter(!is.na(year)) %>%
select(artist.name, song.title, year, song.hotness) %>%
arrange(year)
length(music[music$genre == "blues-rock"])
length(music[music$genre == "blues-rock"],)
music[music$genre == "blues-rock"]
music[music$genre == "blues-rock",]
upperLimit <- length(music[music$genre == "blues-rock",])
upperLimit
music[music$genre == "blues-rock",]
sample(music[music$genre == "blues-rock",], size = 10)
sample(music[music$genre == "blues-rock",], size = 10)
sample(music[music$genre == "blues-rock",], size = 10)
sample(music[music$genre == "blues-rock",], size = 10)
sample(music[music$genre == "blues-rock",], size = 10)
sample(music[music$genre == "blues-rock", c("artist.name", "release.name", "song.title", "duration")], size = 10)
sample(music[music$genre == "blues-rock", c("artist.name", "release.name", "song.title", "duration")], size = 10)
sample(music[music$genre == "blues-rock",], size = 10)
songs <- sample(music[music$genre == "blues-rock",], size = 10)
songs$duration
songs <- sample(music[music$genre == "blues-rock",], size = 10)
songs$duration <- cat(songs$duration / 60, "min", songs$duration %% 60, "sek")
songs
songs <- sample(music[music$genre == "blues-rock",], size = 10)
songs$duration <- str_c(songs$duration / 60, "min", songs$duration %% 60, "sek")
songs <- sample(music[music$genre == "blues-rock",], size = 10)
songs$duration <- str_c(songs$duration / 60, "min", songs$duration %% 60, "sek")
songs
songs <- sample(music[music$genre == "blues-rock",], size = 10)
songs$duration <- str_c(songs$duration // 60, "min", songs$duration %% 60, "sek")
songs <- sample(music[music$genre == "blues-rock",], size = 10)
songs$duration <- str_c(songs$duration %/% 60, "min", songs$duration %% 60, "sek")
songs <- sample(music[music$genre == "blues-rock",], size = 10)
songs$duration <- str_c(songs$duration / 60, "min", songs$duration %% 60, "sek")
songs <- sample(music[music$genre == "blues-rock",], size = 10)
songs$duration <- str_c(songs$duration / 60, "min", songs$duration %% 60, "sek")
songs
songs <- sample(music[music$genre == "blues-rock",], size = 10)
songs
songs$duration <- str_c(songs$duration / 60, "min", songs$duration %% 60, "sek")
songs
songs <- sample(music[music$genre == "blues-rock",], size = 10)
songs$duration <- str_c(songs$duration %/% 60, "min", songs$duration %% 60, "sek")
songs
songs <- sample(music[music$genre == "blues-rock",], size = 10)
songs
songs$duration <- str_c(songs$duration %/% 60, " min ", songs$duration %% 60, " sek")
songs
songs[, c("artist.name", "release.name", "song.title", "duration")]
music %>%
filter(genre == "blues-rock") %>%
sample(size = 10)
music %>%
filter(genre == "blues-rock") %>%
slice_sample(size = 10)
music %>%
filter(genre == "blues-rock") %>%
slice_sample(n = 10)
songs <- sample(music[music$genre == "blues-rock",], size = 10)
songs$duration <- str_c(songs$duration %/% 60, " min ", songs$duration %% 60, " sek")
songs[, c("artist.name", "release.name", "song.title", "duration")]
songs <- sample(music[music$genre == "blues-rock",], size = 10)
songs$duration <- str_c(songs$duration %/% 60, " min ", songs$duration %% 60, " sek")
songs <- sample(music[music$genre == "blues-rock",], size = 10)
songs$duration <- str_c(songs$duration %/% 60, " min ", songs$duration %% 60, " sek")
songs <- sample(music[music$genre == "blues-rock",], size = 10)
songs[, c("artist.name", "release.name", "song.title", "duration")]
music
songs <- sample(music[music$genre == "blues-rock",], size = 10)
songs$duration <- str_c(songs$duration %/% 60, " min ", songs$duration %% 60, " sek")
songs[, c("artist.name", "release.name", "song.title", "duration")]
songs
songs <- sample(music[music$genre == "blues-rock",], size = 10)
songs
music %>%
filter(genre == "blues-rock") %>%
slice_sample(n = 10)
music %>%
filter(genre == "blues-rock") %>%
sample(n = 10)
music %>%
filter(genre == "blues-rock") %>%
sample(size = 10)
music %>%
filter(genre == "blues-rock") %>%
slice_sample(n = 10)
music %>%
filter(genre == "blues-rock") %>%
slice_sample(n = 10) %>%
transmute(artist.name, release.name, song.title,
durationMin = str_c(duration %/% 60, " min ", duration %% 60, " sek"))
music %>%
filter(genre == "blues-rock") %>%
slice_sample(n = 10) %>%
transmute(artist.name, release.name, song.title,
durationMin = str_c(duration %/% 60, " min ", duration %% 60, " sek"))
**RJEŠENJE:**
```{r}
music %>%
filter(year >= 1980 && year <= 1989)
music %>%
filter(year >= 1980 & year <= 1989)
music %>%
filter(year >= 1980,year <= 1989)
music %>%
filter(year >= 1980,year <= 1989) %>%
group_by(year)
music %>%
filter(year >= 1980,year <= 1989) %>%
group_by(year) %>%
mean(duration)
music$duration
music %>%
filter(year >= 1980,year <= 1989) %>%
group_by(year) %>%
summarise(avgDuration = mean(duration), avgHotness = mean(song.hotness))
music %>%
filter(year >= 1980,year <= 1989) %>%
group_by(year)
music %>%
filter(year >= 1980,year <= 1989) %>%
group_by(year) %>%
summarise(avgDuration = mean(duration), avgHotness = mean(song.hotness))
knitr::include_graphics("./ZI/graph1.png")
music %>%
filter(genre == "hip hop")
music %>%
filter(genre == "hip hop") %>%
ggplot(aes(duration)) +
geom_histogram()
music %>%
filter(genre == "hip hop") %>%
ggplot(aes(duration)) +
geom_histogram(fill = "orange")
music %>%
filter(genre == "hip hop") %>%
ggplot(aes(duration)) +
geom_histogram(fill = "orange", color = "black")
music %>%
filter(genre == "hip hop") %>%
ggplot(aes(duration)) +
geom_histogram(fill = "orange", color = "black", bins = 10)
knitr::include_graphics("./ZI/graph1.png")
music %>%
filter(genre == "hip hop") %>%
ggplot(aes(duration)) +
geom_histogram(fill = "orange", color = "black", bins = 10)
music %>%
filter(genre == "hip hop") %>%
ggplot(aes(duration)) +
geom_histogram(fill = "orange", color = "black", bins = 10) +
xlab("Duration of 'hip hop' songs")
knitr::include_graphics("./ZI/graph2.png")
music %>%
filter(year >= 2000, year <= 2010)
knitr::include_graphics("./ZI/graph2.png")
music %>%
filter(year >= 2000, year <= 2010) %>%
group_by(year) %>%
ggplot(aes(song.hotness)) + geom_boxplot() +
xlab("Year of release") +
ylab("song hotness")
music %>%
filter(year >= 2000, year <= 2010) %>%
group_by(year) %>%
ggplot(aes(x = year, y = song.hotness)) + geom_boxplot() +
xlab("Year of release") +
ylab("song hotness")
music %>%
filter(year >= 2000, year <= 2010) %>%
group_by(year) %>%
ggplot(aes(x = as.factor(year), y = song.hotness)) + geom_boxplot() +
xlab("Year of release") +
ylab("song hotness")
knitr::include_graphics("./ZI/graph2.png")
music %>%
filter(year >= 2000, year <= 2010) %>%
group_by(year) %>%
ggplot(aes(x = as.factor(year), y = song.hotness)) + geom_boxplot() +
xlab("Year of release") +
ylab("song hotness")
knitr::include_graphics("./ZI/graph3.png")
music %>% ggplot(aes(x = duration, y = tempo)) +
facet_wrap(time_signature ~ .) + geom_point(alpha = 0.1) +
ggtitle("Duration vs tempo for various time signatures, 0.1 transparency")
round(pnorm(7, 5, 1.5) - pnorm(6, 5, 1.5), 4) * 100
str_c(round(pnorm(7, 5, 1.5) - pnorm(6, 5, 1.5), 4) * 100, "%")
replicate(10000, sample(1:6, 5, replace = TRUE))
replicate(10, sample(1:6, 5, replace = TRUE))
replicate(10, sample(1:6, 5, replace = TRUE)) %>%
apply(1, sum)
replicate(10, sample(1:6, 5, replace = TRUE))
replicate(10, sample(1:6, 5, replace = TRUE)) %>%
apply(2, sum)
replicate(10, sample(1:6, 5, replace = TRUE)) %>%
t %>%
apply(2, function(x) 3 %in% table(x) && 2 %in% table(x)) %>%
mean %>%
`*` (100) %>>%
round(2) %>%
str_c("%")
replicate(10, sample(1:6, 5, replace = TRUE)) %>%
t %>%
apply(2, function(x) 3 %in% table(x) && 2 %in% table(x)) %>%
mean %>%
`*` (100) %>%
round(2) %>%
str_c("%")
replicate(10, sample(1:6, 5, replace = TRUE)) %>%
t %>%
apply(2, function(x) 3 %in% table(x) && 2 %in% table(x)) %>%
mean %>%
`*` (100) %>%
round(2) %>%
str_c("%")
replicate(10000, sample(1:6, 5, replace = T)) %>% t %>%
apply(1, function(x) 3 %in% table(x) && 2 %in% table(x)) %>%
mean %>% `*`(100) %>% round(2) %>%  str_c("%")
replicate(10, sample(1:6, 5, replace = TRUE)) %>%
t %>%
apply(1, function(x) 3 %in% table(x) && 2 %in% table(x)) %>%
mean %>%
`*` (100) %>%
round(2) %>%
str_c("%")
replicate(10000, sample(1:6, 5, replace = TRUE)) %>%
t %>%
apply(1, function(x) 3 %in% table(x) && 2 %in% table(x)) %>%
mean %>%
`*` (100) %>%
round(2) %>%
str_c("%")
replicate(10000, sample(1:6, 5, replace = T)) %>% t %>%
apply(1, function(x) 3 %in% table(x) && 2 %in% table(x))
replicate(100, sample(1:6, 5, replace = T))
replicate(100, sample(1:6, 5, replace = T)) %>% t %>%
apply(1, function(x) 3 %in% table(x) && 2 %in% table(x))
replicate(100, sample(1:6, 5, replace = T))
replicate(10000, sample(1:6, 5, replace = T)) %>%
t %>%
apply(1, function(x) 3 %in% table(x) && 2 %in% table(x))
replicate(10000, sample(1:6, 5, replace = T)) %>%
t %>%
apply(1, function(x) 3 %in% table(x) && 2 %in% table(x)) %>%
mean %>%
```
replicate(10000, sample(1:6, 5, replace = T)) %>%
t %>%
apply(1, function(x) 3 %in% table(x) && 2 %in% table(x)) %>%
mean
replicate(10000, sample(1:6, 5, replace = T)) %>%
t %>%
apply(1, function(x) 3 %in% table(x) && 2 %in% table(x)) %>%
mean %>%
`*` (100) %>%
str_c("%")
set.seed(1232)
replicate(10000, sample(1:6, 5, replace = T)) %>% t %>%
apply(1, function(x) max(table(x)) > 2) %>%
mean %>% `*`(100) %>% round(2) %>% str_c("%")
replicate(10000, sample(1:6, 5, replace = T)) %>% t %>%
apply(1, function(x) 3 %in% table(x) && 2 %in% table(x)) %>%
mean %>% `*`(100) %>% round(2) %>%  str_c("%")
replicate(10000, sample(1:6, 5, replace = T)) %>% t %>%
apply(1, function(x) sum(table(x) > 1) == 0 ) %>%
mean %>% `*`(100) %>% round(2) %>% str_c("%")
replicate(10000, sample(1:6, 5, replace = T)) %>% t %>%
apply(1, function(x) sum(x %% 2) == 5) %>%
mean %>% `*`(100) %>% round(2) %>% str_c("%")
set.seed(1233)
train_ind <- sample(1:nrow(music), round(0.7 * nrow(music)))
music.train <- music[train_ind, ]
music.test <- music[-train_ind, ]
linearReg <- lm(data = music.train, song.hotness ~ duration + tempo + artist.hotness)
linearReg
summary(linearReg)
predict(linearReg, music.test)
predikcija <- predict(linearReg, music.test)
summary(predikcija)
music.test$prediction <- predict(linearReg, music.test)
music.test$residuals <- music.test$song.hotness - music.test$prediction
music.test %>%
ggplot(aes(sample = residuals())) + geom_qq()
ggplot(aes(sample = residuals) + geom_qq()
music.test %>%
music.test$prediction <- predict(linearReg, music.test)
music.test$residuals <- music.test$song.hotness - music.test$prediction
music.test %>%
ggplot(aes(sample = residuals)) + geom_qq()
music.test %>%
ggplot(aes(x = residuals)) + geom_density()
music.test %>%
ggplot(aes(x = residuals)) + geom_histogram()
